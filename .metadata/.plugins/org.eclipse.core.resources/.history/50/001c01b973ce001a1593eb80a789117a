package com.example.h2db.h2db_use;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.example.h2db.h2db_use.exception.UserNotFoundException;

@RestController
@CrossOrigin(origins = "*")
public class ProjectController {

	@Autowired
	private UserDAO userDao;

	@RequestMapping("/get-message")
	public String getMessage() {
		return "Let's start!!";
	}

	// @PathVariable
	@RequestMapping("/get-message/{passedName}")
	public String getMessage(@PathVariable String passedName) {
		return "You are good to go : " + passedName;
	}

	// @RequestParam
	@RequestMapping("/get-msg")
	public String getMessageByPathParm(@RequestParam String passedName) {
		return "You are good to go : " + passedName;
	}

	@RequestMapping("/user/getAllUser")
	public List<User> getAllUser() {
		return userDao.findAllUser();
	}

	@RequestMapping("/user/getUser/{mailId}")
	public User getUser(@PathVariable String mailId) throws RuntimeException {
		User user = userDao.findOneUser(mailId);
		if (user == null)
			throw new UserNotFoundException("user not exist!");

		return user;
	}

	@RequestMapping("/saveData")
	public ResponseEntity<Object> createUSer(@RequestBody User user) {
		User savedUSer = userDao.saveUser(user);
		URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
				.buildAndExpand(savedUSer.getUserId()).toUri();
		return ResponseEntity.created(location).build();
	}

	@RequestMapping("/user/{userId}")
	public String saveUSer(@PathVariable Integer userId) {
		if (userDao.removeUser(userId)) {
			return "User removed!";
		}
		return "user Not Found!";
	}

	@RequestMapping("/checking-uri")
	public ResponseEntity<Object> getURI() {
		/*
		 * URI location = ServletUriComponentsBuilder .fromCurrentRequest()
		 * .path("/{path}") .buildAndExpand("new-path") .toUri();
		 * 
		 */

		URI location = ServletUriComponentsBuilder.fromCurrentRequestUri().path("/new").build().toUri();

		return ResponseEntity.created(location).build();
	}

}
